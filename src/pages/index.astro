---
import Layout from "../layouts/Layout.astro";
import BlockAbout from "../components/Block-about.astro";
import BlockHero from "../components/Block-hero.astro";
import BlockContact from "../components/Block-contact.astro";
import { getPages, getBlocks } from "../lib/wp-api";

// Verwijder de oude interfaces (Page en Block) omdat we WordPressPage en WordPressBlock gebruiken

// Variabelen voor data-opslag
let homePage: WordPressPage | null = null;
let blocks: WordPressBlock[] = [];
let error: string | null = null;
let debugData: {
	pages: WordPressPage[] | null;
	homepage: WordPressPage | null;
	blocks: WordPressBlock[] | null;
} = {
	pages: null,
	homepage: null,
	blocks: null
};

try {
	// Haal alle pagina's op
	const pages = await getPages();
	console.log('Ontvangen paginas:', pages);
	debugData.pages = pages;

	// Zoek de pagina met de slug 'home'
	homePage = pages.find((p) => p.slug === "home") || null;
	console.log('Gevonden homepage:', homePage);
	debugData.homepage = homePage;

	// Haal de blokken op voor de homepagina
	if (homePage) {
		blocks = await getBlocks(homePage.id);
		console.log('Ontvangen blokken:', blocks);
		debugData.blocks = blocks;
	} else {
		console.warn("Homepagina niet gevonden. Controleer de slug 'home'.");
	}
} catch (e: unknown) {
	error = e instanceof Error ? e.message : 'Er is een onbekende fout opgetreden';
	console.error("Error fetching data in index.astro:", e);
}
---

<Layout>
	<main>
		{/* Toon foutmeldingen indien aanwezig */}
		{error ? (
			<p class="text-red-500">{error}</p>
		) : homePage ? (
			<div>
				<div>
					{/* Render dynamisch de blokken */}
					{blocks.length > 0 ? (
						blocks
							.filter((block) => 
								["acf/heroblock", "acf/aboutblock", "acf/contactblock"].includes(block.blockName)
							)
							.map((block, index) => {
								console.log(`Rendering block ${index + 1}:`, block);
								switch (block.blockName) {
									case "acf/heroblock":
										return (
											<BlockHero
												key={`hero-block-${index}`}
												{...block.attributes.data}
											/>
										);
									case "acf/aboutblock":
										return (
											<BlockAbout
												key={`about-block-${index}`}
												{...block.attributes.data}
											/>
										);
									case "acf/contactblock":
										return (
											<BlockContact
												key={`contact-block-${index}`}
												{...block.attributes.data}
											/>
										);
									default:
										console.warn("Onbekend blok:", block.blockName);
										return null; // Onbekend bloktype overslaan
								}
							})
					) : (
						<p class="text-gray-500">Geen blokken gevonden voor de homepagina</p>
					)}
				</div>
			</div>
		) : (
			<p class="text-gray-500">Homepagina niet gevonden</p>
		)}
	</main>
</Layout>